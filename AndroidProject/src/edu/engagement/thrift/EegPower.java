/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.engagement.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EegPower implements org.apache.thrift.TBase<EegPower, EegPower._Fields>, java.io.Serializable, Cloneable, Comparable<EegPower> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EegPower");

  private static final org.apache.thrift.protocol.TField MILLISECOND_TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("millisecondTimeStamp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ALPHA_FIELD_DESC = new org.apache.thrift.protocol.TField("alpha", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BETA_FIELD_DESC = new org.apache.thrift.protocol.TField("beta", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField THETA_FIELD_DESC = new org.apache.thrift.protocol.TField("theta", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EegPowerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EegPowerTupleSchemeFactory());
  }

  public String millisecondTimeStamp; // optional
  public int alpha; // optional
  public int beta; // optional
  public int theta; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MILLISECOND_TIME_STAMP((short)1, "millisecondTimeStamp"),
    ALPHA((short)2, "alpha"),
    BETA((short)3, "beta"),
    THETA((short)4, "theta");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MILLISECOND_TIME_STAMP
          return MILLISECOND_TIME_STAMP;
        case 2: // ALPHA
          return ALPHA;
        case 3: // BETA
          return BETA;
        case 4: // THETA
          return THETA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALPHA_ISSET_ID = 0;
  private static final int __BETA_ISSET_ID = 1;
  private static final int __THETA_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MILLISECOND_TIME_STAMP,_Fields.ALPHA,_Fields.BETA,_Fields.THETA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MILLISECOND_TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("millisecondTimeStamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.ALPHA, new org.apache.thrift.meta_data.FieldMetaData("alpha", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BETA, new org.apache.thrift.meta_data.FieldMetaData("beta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THETA, new org.apache.thrift.meta_data.FieldMetaData("theta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EegPower.class, metaDataMap);
  }

  public EegPower() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EegPower(EegPower other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMillisecondTimeStamp()) {
      this.millisecondTimeStamp = other.millisecondTimeStamp;
    }
    this.alpha = other.alpha;
    this.beta = other.beta;
    this.theta = other.theta;
  }

  public EegPower deepCopy() {
    return new EegPower(this);
  }

  @Override
  public void clear() {
    this.millisecondTimeStamp = null;
    setAlphaIsSet(false);
    this.alpha = 0;
    setBetaIsSet(false);
    this.beta = 0;
    setThetaIsSet(false);
    this.theta = 0;
  }

  public String getMillisecondTimeStamp() {
    return this.millisecondTimeStamp;
  }

  public EegPower setMillisecondTimeStamp(String millisecondTimeStamp) {
    this.millisecondTimeStamp = millisecondTimeStamp;
    return this;
  }

  public void unsetMillisecondTimeStamp() {
    this.millisecondTimeStamp = null;
  }

  /** Returns true if field millisecondTimeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetMillisecondTimeStamp() {
    return this.millisecondTimeStamp != null;
  }

  public void setMillisecondTimeStampIsSet(boolean value) {
    if (!value) {
      this.millisecondTimeStamp = null;
    }
  }

  public int getAlpha() {
    return this.alpha;
  }

  public EegPower setAlpha(int alpha) {
    this.alpha = alpha;
    setAlphaIsSet(true);
    return this;
  }

  public void unsetAlpha() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALPHA_ISSET_ID);
  }

  /** Returns true if field alpha is set (has been assigned a value) and false otherwise */
  public boolean isSetAlpha() {
    return EncodingUtils.testBit(__isset_bitfield, __ALPHA_ISSET_ID);
  }

  public void setAlphaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALPHA_ISSET_ID, value);
  }

  public int getBeta() {
    return this.beta;
  }

  public EegPower setBeta(int beta) {
    this.beta = beta;
    setBetaIsSet(true);
    return this;
  }

  public void unsetBeta() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BETA_ISSET_ID);
  }

  /** Returns true if field beta is set (has been assigned a value) and false otherwise */
  public boolean isSetBeta() {
    return EncodingUtils.testBit(__isset_bitfield, __BETA_ISSET_ID);
  }

  public void setBetaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BETA_ISSET_ID, value);
  }

  public int getTheta() {
    return this.theta;
  }

  public EegPower setTheta(int theta) {
    this.theta = theta;
    setThetaIsSet(true);
    return this;
  }

  public void unsetTheta() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THETA_ISSET_ID);
  }

  /** Returns true if field theta is set (has been assigned a value) and false otherwise */
  public boolean isSetTheta() {
    return EncodingUtils.testBit(__isset_bitfield, __THETA_ISSET_ID);
  }

  public void setThetaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THETA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MILLISECOND_TIME_STAMP:
      if (value == null) {
        unsetMillisecondTimeStamp();
      } else {
        setMillisecondTimeStamp((String)value);
      }
      break;

    case ALPHA:
      if (value == null) {
        unsetAlpha();
      } else {
        setAlpha((Integer)value);
      }
      break;

    case BETA:
      if (value == null) {
        unsetBeta();
      } else {
        setBeta((Integer)value);
      }
      break;

    case THETA:
      if (value == null) {
        unsetTheta();
      } else {
        setTheta((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MILLISECOND_TIME_STAMP:
      return getMillisecondTimeStamp();

    case ALPHA:
      return Integer.valueOf(getAlpha());

    case BETA:
      return Integer.valueOf(getBeta());

    case THETA:
      return Integer.valueOf(getTheta());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MILLISECOND_TIME_STAMP:
      return isSetMillisecondTimeStamp();
    case ALPHA:
      return isSetAlpha();
    case BETA:
      return isSetBeta();
    case THETA:
      return isSetTheta();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EegPower)
      return this.equals((EegPower)that);
    return false;
  }

  public boolean equals(EegPower that) {
    if (that == null)
      return false;

    boolean this_present_millisecondTimeStamp = true && this.isSetMillisecondTimeStamp();
    boolean that_present_millisecondTimeStamp = true && that.isSetMillisecondTimeStamp();
    if (this_present_millisecondTimeStamp || that_present_millisecondTimeStamp) {
      if (!(this_present_millisecondTimeStamp && that_present_millisecondTimeStamp))
        return false;
      if (!this.millisecondTimeStamp.equals(that.millisecondTimeStamp))
        return false;
    }

    boolean this_present_alpha = true && this.isSetAlpha();
    boolean that_present_alpha = true && that.isSetAlpha();
    if (this_present_alpha || that_present_alpha) {
      if (!(this_present_alpha && that_present_alpha))
        return false;
      if (this.alpha != that.alpha)
        return false;
    }

    boolean this_present_beta = true && this.isSetBeta();
    boolean that_present_beta = true && that.isSetBeta();
    if (this_present_beta || that_present_beta) {
      if (!(this_present_beta && that_present_beta))
        return false;
      if (this.beta != that.beta)
        return false;
    }

    boolean this_present_theta = true && this.isSetTheta();
    boolean that_present_theta = true && that.isSetTheta();
    if (this_present_theta || that_present_theta) {
      if (!(this_present_theta && that_present_theta))
        return false;
      if (this.theta != that.theta)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EegPower other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMillisecondTimeStamp()).compareTo(other.isSetMillisecondTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMillisecondTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.millisecondTimeStamp, other.millisecondTimeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlpha()).compareTo(other.isSetAlpha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlpha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alpha, other.alpha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeta()).compareTo(other.isSetBeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beta, other.beta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTheta()).compareTo(other.isSetTheta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theta, other.theta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EegPower(");
    boolean first = true;

    if (isSetMillisecondTimeStamp()) {
      sb.append("millisecondTimeStamp:");
      if (this.millisecondTimeStamp == null) {
        sb.append("null");
      } else {
        sb.append(this.millisecondTimeStamp);
      }
      first = false;
    }
    if (isSetAlpha()) {
      if (!first) sb.append(", ");
      sb.append("alpha:");
      sb.append(this.alpha);
      first = false;
    }
    if (isSetBeta()) {
      if (!first) sb.append(", ");
      sb.append("beta:");
      sb.append(this.beta);
      first = false;
    }
    if (isSetTheta()) {
      if (!first) sb.append(", ");
      sb.append("theta:");
      sb.append(this.theta);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EegPowerStandardSchemeFactory implements SchemeFactory {
    public EegPowerStandardScheme getScheme() {
      return new EegPowerStandardScheme();
    }
  }

  private static class EegPowerStandardScheme extends StandardScheme<EegPower> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EegPower struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MILLISECOND_TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.millisecondTimeStamp = iprot.readString();
              struct.setMillisecondTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALPHA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alpha = iprot.readI32();
              struct.setAlphaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BETA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.beta = iprot.readI32();
              struct.setBetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THETA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.theta = iprot.readI32();
              struct.setThetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EegPower struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.millisecondTimeStamp != null) {
        if (struct.isSetMillisecondTimeStamp()) {
          oprot.writeFieldBegin(MILLISECOND_TIME_STAMP_FIELD_DESC);
          oprot.writeString(struct.millisecondTimeStamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAlpha()) {
        oprot.writeFieldBegin(ALPHA_FIELD_DESC);
        oprot.writeI32(struct.alpha);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBeta()) {
        oprot.writeFieldBegin(BETA_FIELD_DESC);
        oprot.writeI32(struct.beta);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTheta()) {
        oprot.writeFieldBegin(THETA_FIELD_DESC);
        oprot.writeI32(struct.theta);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EegPowerTupleSchemeFactory implements SchemeFactory {
    public EegPowerTupleScheme getScheme() {
      return new EegPowerTupleScheme();
    }
  }

  private static class EegPowerTupleScheme extends TupleScheme<EegPower> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EegPower struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMillisecondTimeStamp()) {
        optionals.set(0);
      }
      if (struct.isSetAlpha()) {
        optionals.set(1);
      }
      if (struct.isSetBeta()) {
        optionals.set(2);
      }
      if (struct.isSetTheta()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMillisecondTimeStamp()) {
        oprot.writeString(struct.millisecondTimeStamp);
      }
      if (struct.isSetAlpha()) {
        oprot.writeI32(struct.alpha);
      }
      if (struct.isSetBeta()) {
        oprot.writeI32(struct.beta);
      }
      if (struct.isSetTheta()) {
        oprot.writeI32(struct.theta);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EegPower struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.millisecondTimeStamp = iprot.readString();
        struct.setMillisecondTimeStampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.alpha = iprot.readI32();
        struct.setAlphaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.beta = iprot.readI32();
        struct.setBetaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.theta = iprot.readI32();
        struct.setThetaIsSet(true);
      }
    }
  }

}

