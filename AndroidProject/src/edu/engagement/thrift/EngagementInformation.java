/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.engagement.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EngagementInformation implements org.apache.thrift.TBase<EngagementInformation, EngagementInformation._Fields>, java.io.Serializable, Cloneable, Comparable<EngagementInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EngagementInformation");

  private static final org.apache.thrift.protocol.TField GOOGLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("googleId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EEG_POWER_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("eegPowerMessages", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EEG_RAW_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("eegRawMessages", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EEG_ATTENTION_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("eegAttentionMessages", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField HEART_RATE_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("heartRateMessages", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EngagementInformationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EngagementInformationTupleSchemeFactory());
  }

  public String googleId; // optional
  public List<EegPower> eegPowerMessages; // optional
  public List<EegRaw> eegRawMessages; // optional
  public List<EegAttention> eegAttentionMessages; // optional
  public List<HeartRate> heartRateMessages; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GOOGLE_ID((short)1, "googleId"),
    EEG_POWER_MESSAGES((short)2, "eegPowerMessages"),
    EEG_RAW_MESSAGES((short)3, "eegRawMessages"),
    EEG_ATTENTION_MESSAGES((short)4, "eegAttentionMessages"),
    HEART_RATE_MESSAGES((short)5, "heartRateMessages");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GOOGLE_ID
          return GOOGLE_ID;
        case 2: // EEG_POWER_MESSAGES
          return EEG_POWER_MESSAGES;
        case 3: // EEG_RAW_MESSAGES
          return EEG_RAW_MESSAGES;
        case 4: // EEG_ATTENTION_MESSAGES
          return EEG_ATTENTION_MESSAGES;
        case 5: // HEART_RATE_MESSAGES
          return HEART_RATE_MESSAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.GOOGLE_ID,_Fields.EEG_POWER_MESSAGES,_Fields.EEG_RAW_MESSAGES,_Fields.EEG_ATTENTION_MESSAGES,_Fields.HEART_RATE_MESSAGES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GOOGLE_ID, new org.apache.thrift.meta_data.FieldMetaData("googleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EEG_POWER_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("eegPowerMessages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EegPower.class))));
    tmpMap.put(_Fields.EEG_RAW_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("eegRawMessages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EegRaw.class))));
    tmpMap.put(_Fields.EEG_ATTENTION_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("eegAttentionMessages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EegAttention.class))));
    tmpMap.put(_Fields.HEART_RATE_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("heartRateMessages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HeartRate.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EngagementInformation.class, metaDataMap);
  }

  public EngagementInformation() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EngagementInformation(EngagementInformation other) {
    if (other.isSetGoogleId()) {
      this.googleId = other.googleId;
    }
    if (other.isSetEegPowerMessages()) {
      List<EegPower> __this__eegPowerMessages = new ArrayList<EegPower>(other.eegPowerMessages.size());
      for (EegPower other_element : other.eegPowerMessages) {
        __this__eegPowerMessages.add(new EegPower(other_element));
      }
      this.eegPowerMessages = __this__eegPowerMessages;
    }
    if (other.isSetEegRawMessages()) {
      List<EegRaw> __this__eegRawMessages = new ArrayList<EegRaw>(other.eegRawMessages.size());
      for (EegRaw other_element : other.eegRawMessages) {
        __this__eegRawMessages.add(new EegRaw(other_element));
      }
      this.eegRawMessages = __this__eegRawMessages;
    }
    if (other.isSetEegAttentionMessages()) {
      List<EegAttention> __this__eegAttentionMessages = new ArrayList<EegAttention>(other.eegAttentionMessages.size());
      for (EegAttention other_element : other.eegAttentionMessages) {
        __this__eegAttentionMessages.add(new EegAttention(other_element));
      }
      this.eegAttentionMessages = __this__eegAttentionMessages;
    }
    if (other.isSetHeartRateMessages()) {
      List<HeartRate> __this__heartRateMessages = new ArrayList<HeartRate>(other.heartRateMessages.size());
      for (HeartRate other_element : other.heartRateMessages) {
        __this__heartRateMessages.add(new HeartRate(other_element));
      }
      this.heartRateMessages = __this__heartRateMessages;
    }
  }

  public EngagementInformation deepCopy() {
    return new EngagementInformation(this);
  }

  @Override
  public void clear() {
    this.googleId = null;
    this.eegPowerMessages = null;
    this.eegRawMessages = null;
    this.eegAttentionMessages = null;
    this.heartRateMessages = null;
  }

  public String getGoogleId() {
    return this.googleId;
  }

  public EngagementInformation setGoogleId(String googleId) {
    this.googleId = googleId;
    return this;
  }

  public void unsetGoogleId() {
    this.googleId = null;
  }

  /** Returns true if field googleId is set (has been assigned a value) and false otherwise */
  public boolean isSetGoogleId() {
    return this.googleId != null;
  }

  public void setGoogleIdIsSet(boolean value) {
    if (!value) {
      this.googleId = null;
    }
  }

  public int getEegPowerMessagesSize() {
    return (this.eegPowerMessages == null) ? 0 : this.eegPowerMessages.size();
  }

  public java.util.Iterator<EegPower> getEegPowerMessagesIterator() {
    return (this.eegPowerMessages == null) ? null : this.eegPowerMessages.iterator();
  }

  public void addToEegPowerMessages(EegPower elem) {
    if (this.eegPowerMessages == null) {
      this.eegPowerMessages = new ArrayList<EegPower>();
    }
    this.eegPowerMessages.add(elem);
  }

  public List<EegPower> getEegPowerMessages() {
    return this.eegPowerMessages;
  }

  public EngagementInformation setEegPowerMessages(List<EegPower> eegPowerMessages) {
    this.eegPowerMessages = eegPowerMessages;
    return this;
  }

  public void unsetEegPowerMessages() {
    this.eegPowerMessages = null;
  }

  /** Returns true if field eegPowerMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetEegPowerMessages() {
    return this.eegPowerMessages != null;
  }

  public void setEegPowerMessagesIsSet(boolean value) {
    if (!value) {
      this.eegPowerMessages = null;
    }
  }

  public int getEegRawMessagesSize() {
    return (this.eegRawMessages == null) ? 0 : this.eegRawMessages.size();
  }

  public java.util.Iterator<EegRaw> getEegRawMessagesIterator() {
    return (this.eegRawMessages == null) ? null : this.eegRawMessages.iterator();
  }

  public void addToEegRawMessages(EegRaw elem) {
    if (this.eegRawMessages == null) {
      this.eegRawMessages = new ArrayList<EegRaw>();
    }
    this.eegRawMessages.add(elem);
  }

  public List<EegRaw> getEegRawMessages() {
    return this.eegRawMessages;
  }

  public EngagementInformation setEegRawMessages(List<EegRaw> eegRawMessages) {
    this.eegRawMessages = eegRawMessages;
    return this;
  }

  public void unsetEegRawMessages() {
    this.eegRawMessages = null;
  }

  /** Returns true if field eegRawMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetEegRawMessages() {
    return this.eegRawMessages != null;
  }

  public void setEegRawMessagesIsSet(boolean value) {
    if (!value) {
      this.eegRawMessages = null;
    }
  }

  public int getEegAttentionMessagesSize() {
    return (this.eegAttentionMessages == null) ? 0 : this.eegAttentionMessages.size();
  }

  public java.util.Iterator<EegAttention> getEegAttentionMessagesIterator() {
    return (this.eegAttentionMessages == null) ? null : this.eegAttentionMessages.iterator();
  }

  public void addToEegAttentionMessages(EegAttention elem) {
    if (this.eegAttentionMessages == null) {
      this.eegAttentionMessages = new ArrayList<EegAttention>();
    }
    this.eegAttentionMessages.add(elem);
  }

  public List<EegAttention> getEegAttentionMessages() {
    return this.eegAttentionMessages;
  }

  public EngagementInformation setEegAttentionMessages(List<EegAttention> eegAttentionMessages) {
    this.eegAttentionMessages = eegAttentionMessages;
    return this;
  }

  public void unsetEegAttentionMessages() {
    this.eegAttentionMessages = null;
  }

  /** Returns true if field eegAttentionMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetEegAttentionMessages() {
    return this.eegAttentionMessages != null;
  }

  public void setEegAttentionMessagesIsSet(boolean value) {
    if (!value) {
      this.eegAttentionMessages = null;
    }
  }

  public int getHeartRateMessagesSize() {
    return (this.heartRateMessages == null) ? 0 : this.heartRateMessages.size();
  }

  public java.util.Iterator<HeartRate> getHeartRateMessagesIterator() {
    return (this.heartRateMessages == null) ? null : this.heartRateMessages.iterator();
  }

  public void addToHeartRateMessages(HeartRate elem) {
    if (this.heartRateMessages == null) {
      this.heartRateMessages = new ArrayList<HeartRate>();
    }
    this.heartRateMessages.add(elem);
  }

  public List<HeartRate> getHeartRateMessages() {
    return this.heartRateMessages;
  }

  public EngagementInformation setHeartRateMessages(List<HeartRate> heartRateMessages) {
    this.heartRateMessages = heartRateMessages;
    return this;
  }

  public void unsetHeartRateMessages() {
    this.heartRateMessages = null;
  }

  /** Returns true if field heartRateMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartRateMessages() {
    return this.heartRateMessages != null;
  }

  public void setHeartRateMessagesIsSet(boolean value) {
    if (!value) {
      this.heartRateMessages = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GOOGLE_ID:
      if (value == null) {
        unsetGoogleId();
      } else {
        setGoogleId((String)value);
      }
      break;

    case EEG_POWER_MESSAGES:
      if (value == null) {
        unsetEegPowerMessages();
      } else {
        setEegPowerMessages((List<EegPower>)value);
      }
      break;

    case EEG_RAW_MESSAGES:
      if (value == null) {
        unsetEegRawMessages();
      } else {
        setEegRawMessages((List<EegRaw>)value);
      }
      break;

    case EEG_ATTENTION_MESSAGES:
      if (value == null) {
        unsetEegAttentionMessages();
      } else {
        setEegAttentionMessages((List<EegAttention>)value);
      }
      break;

    case HEART_RATE_MESSAGES:
      if (value == null) {
        unsetHeartRateMessages();
      } else {
        setHeartRateMessages((List<HeartRate>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GOOGLE_ID:
      return getGoogleId();

    case EEG_POWER_MESSAGES:
      return getEegPowerMessages();

    case EEG_RAW_MESSAGES:
      return getEegRawMessages();

    case EEG_ATTENTION_MESSAGES:
      return getEegAttentionMessages();

    case HEART_RATE_MESSAGES:
      return getHeartRateMessages();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GOOGLE_ID:
      return isSetGoogleId();
    case EEG_POWER_MESSAGES:
      return isSetEegPowerMessages();
    case EEG_RAW_MESSAGES:
      return isSetEegRawMessages();
    case EEG_ATTENTION_MESSAGES:
      return isSetEegAttentionMessages();
    case HEART_RATE_MESSAGES:
      return isSetHeartRateMessages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EngagementInformation)
      return this.equals((EngagementInformation)that);
    return false;
  }

  public boolean equals(EngagementInformation that) {
    if (that == null)
      return false;

    boolean this_present_googleId = true && this.isSetGoogleId();
    boolean that_present_googleId = true && that.isSetGoogleId();
    if (this_present_googleId || that_present_googleId) {
      if (!(this_present_googleId && that_present_googleId))
        return false;
      if (!this.googleId.equals(that.googleId))
        return false;
    }

    boolean this_present_eegPowerMessages = true && this.isSetEegPowerMessages();
    boolean that_present_eegPowerMessages = true && that.isSetEegPowerMessages();
    if (this_present_eegPowerMessages || that_present_eegPowerMessages) {
      if (!(this_present_eegPowerMessages && that_present_eegPowerMessages))
        return false;
      if (!this.eegPowerMessages.equals(that.eegPowerMessages))
        return false;
    }

    boolean this_present_eegRawMessages = true && this.isSetEegRawMessages();
    boolean that_present_eegRawMessages = true && that.isSetEegRawMessages();
    if (this_present_eegRawMessages || that_present_eegRawMessages) {
      if (!(this_present_eegRawMessages && that_present_eegRawMessages))
        return false;
      if (!this.eegRawMessages.equals(that.eegRawMessages))
        return false;
    }

    boolean this_present_eegAttentionMessages = true && this.isSetEegAttentionMessages();
    boolean that_present_eegAttentionMessages = true && that.isSetEegAttentionMessages();
    if (this_present_eegAttentionMessages || that_present_eegAttentionMessages) {
      if (!(this_present_eegAttentionMessages && that_present_eegAttentionMessages))
        return false;
      if (!this.eegAttentionMessages.equals(that.eegAttentionMessages))
        return false;
    }

    boolean this_present_heartRateMessages = true && this.isSetHeartRateMessages();
    boolean that_present_heartRateMessages = true && that.isSetHeartRateMessages();
    if (this_present_heartRateMessages || that_present_heartRateMessages) {
      if (!(this_present_heartRateMessages && that_present_heartRateMessages))
        return false;
      if (!this.heartRateMessages.equals(that.heartRateMessages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EngagementInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGoogleId()).compareTo(other.isSetGoogleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoogleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.googleId, other.googleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEegPowerMessages()).compareTo(other.isSetEegPowerMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEegPowerMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eegPowerMessages, other.eegPowerMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEegRawMessages()).compareTo(other.isSetEegRawMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEegRawMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eegRawMessages, other.eegRawMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEegAttentionMessages()).compareTo(other.isSetEegAttentionMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEegAttentionMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eegAttentionMessages, other.eegAttentionMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartRateMessages()).compareTo(other.isSetHeartRateMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartRateMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartRateMessages, other.heartRateMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EngagementInformation(");
    boolean first = true;

    if (isSetGoogleId()) {
      sb.append("googleId:");
      if (this.googleId == null) {
        sb.append("null");
      } else {
        sb.append(this.googleId);
      }
      first = false;
    }
    if (isSetEegPowerMessages()) {
      if (!first) sb.append(", ");
      sb.append("eegPowerMessages:");
      if (this.eegPowerMessages == null) {
        sb.append("null");
      } else {
        sb.append(this.eegPowerMessages);
      }
      first = false;
    }
    if (isSetEegRawMessages()) {
      if (!first) sb.append(", ");
      sb.append("eegRawMessages:");
      if (this.eegRawMessages == null) {
        sb.append("null");
      } else {
        sb.append(this.eegRawMessages);
      }
      first = false;
    }
    if (isSetEegAttentionMessages()) {
      if (!first) sb.append(", ");
      sb.append("eegAttentionMessages:");
      if (this.eegAttentionMessages == null) {
        sb.append("null");
      } else {
        sb.append(this.eegAttentionMessages);
      }
      first = false;
    }
    if (isSetHeartRateMessages()) {
      if (!first) sb.append(", ");
      sb.append("heartRateMessages:");
      if (this.heartRateMessages == null) {
        sb.append("null");
      } else {
        sb.append(this.heartRateMessages);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EngagementInformationStandardSchemeFactory implements SchemeFactory {
    public EngagementInformationStandardScheme getScheme() {
      return new EngagementInformationStandardScheme();
    }
  }

  private static class EngagementInformationStandardScheme extends StandardScheme<EngagementInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EngagementInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GOOGLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.googleId = iprot.readString();
              struct.setGoogleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EEG_POWER_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.eegPowerMessages = new ArrayList<EegPower>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  EegPower _elem2;
                  _elem2 = new EegPower();
                  _elem2.read(iprot);
                  struct.eegPowerMessages.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setEegPowerMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EEG_RAW_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.eegRawMessages = new ArrayList<EegRaw>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  EegRaw _elem5;
                  _elem5 = new EegRaw();
                  _elem5.read(iprot);
                  struct.eegRawMessages.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setEegRawMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EEG_ATTENTION_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.eegAttentionMessages = new ArrayList<EegAttention>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  EegAttention _elem8;
                  _elem8 = new EegAttention();
                  _elem8.read(iprot);
                  struct.eegAttentionMessages.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setEegAttentionMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEART_RATE_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.heartRateMessages = new ArrayList<HeartRate>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  HeartRate _elem11;
                  _elem11 = new HeartRate();
                  _elem11.read(iprot);
                  struct.heartRateMessages.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setHeartRateMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EngagementInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.googleId != null) {
        if (struct.isSetGoogleId()) {
          oprot.writeFieldBegin(GOOGLE_ID_FIELD_DESC);
          oprot.writeString(struct.googleId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.eegPowerMessages != null) {
        if (struct.isSetEegPowerMessages()) {
          oprot.writeFieldBegin(EEG_POWER_MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.eegPowerMessages.size()));
            for (EegPower _iter12 : struct.eegPowerMessages)
            {
              _iter12.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.eegRawMessages != null) {
        if (struct.isSetEegRawMessages()) {
          oprot.writeFieldBegin(EEG_RAW_MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.eegRawMessages.size()));
            for (EegRaw _iter13 : struct.eegRawMessages)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.eegAttentionMessages != null) {
        if (struct.isSetEegAttentionMessages()) {
          oprot.writeFieldBegin(EEG_ATTENTION_MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.eegAttentionMessages.size()));
            for (EegAttention _iter14 : struct.eegAttentionMessages)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.heartRateMessages != null) {
        if (struct.isSetHeartRateMessages()) {
          oprot.writeFieldBegin(HEART_RATE_MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.heartRateMessages.size()));
            for (HeartRate _iter15 : struct.heartRateMessages)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EngagementInformationTupleSchemeFactory implements SchemeFactory {
    public EngagementInformationTupleScheme getScheme() {
      return new EngagementInformationTupleScheme();
    }
  }

  private static class EngagementInformationTupleScheme extends TupleScheme<EngagementInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EngagementInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGoogleId()) {
        optionals.set(0);
      }
      if (struct.isSetEegPowerMessages()) {
        optionals.set(1);
      }
      if (struct.isSetEegRawMessages()) {
        optionals.set(2);
      }
      if (struct.isSetEegAttentionMessages()) {
        optionals.set(3);
      }
      if (struct.isSetHeartRateMessages()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetGoogleId()) {
        oprot.writeString(struct.googleId);
      }
      if (struct.isSetEegPowerMessages()) {
        {
          oprot.writeI32(struct.eegPowerMessages.size());
          for (EegPower _iter16 : struct.eegPowerMessages)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetEegRawMessages()) {
        {
          oprot.writeI32(struct.eegRawMessages.size());
          for (EegRaw _iter17 : struct.eegRawMessages)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetEegAttentionMessages()) {
        {
          oprot.writeI32(struct.eegAttentionMessages.size());
          for (EegAttention _iter18 : struct.eegAttentionMessages)
          {
            _iter18.write(oprot);
          }
        }
      }
      if (struct.isSetHeartRateMessages()) {
        {
          oprot.writeI32(struct.heartRateMessages.size());
          for (HeartRate _iter19 : struct.heartRateMessages)
          {
            _iter19.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EngagementInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.googleId = iprot.readString();
        struct.setGoogleIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.eegPowerMessages = new ArrayList<EegPower>(_list20.size);
          for (int _i21 = 0; _i21 < _list20.size; ++_i21)
          {
            EegPower _elem22;
            _elem22 = new EegPower();
            _elem22.read(iprot);
            struct.eegPowerMessages.add(_elem22);
          }
        }
        struct.setEegPowerMessagesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.eegRawMessages = new ArrayList<EegRaw>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            EegRaw _elem25;
            _elem25 = new EegRaw();
            _elem25.read(iprot);
            struct.eegRawMessages.add(_elem25);
          }
        }
        struct.setEegRawMessagesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.eegAttentionMessages = new ArrayList<EegAttention>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            EegAttention _elem28;
            _elem28 = new EegAttention();
            _elem28.read(iprot);
            struct.eegAttentionMessages.add(_elem28);
          }
        }
        struct.setEegAttentionMessagesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.heartRateMessages = new ArrayList<HeartRate>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            HeartRate _elem31;
            _elem31 = new HeartRate();
            _elem31.read(iprot);
            struct.heartRateMessages.add(_elem31);
          }
        }
        struct.setHeartRateMessagesIsSet(true);
      }
    }
  }

}

